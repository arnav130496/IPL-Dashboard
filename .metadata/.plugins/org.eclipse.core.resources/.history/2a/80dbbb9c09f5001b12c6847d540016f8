package com.arnavsaraf.ipldashboard.data;

import javax.sql.DataSource;

import org.springframework.batch.core.configuration.annotation.EnableBatchProcessing;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.item.database.BeanPropertyItemSqlParameterSourceProvider;
import org.springframework.batch.item.database.JdbcBatchItemWriter;
import org.springframework.batch.item.database.builder.JdbcBatchItemWriterBuilder;
import org.springframework.batch.item.file.FlatFileItemReader;
import org.springframework.batch.item.file.builder.FlatFileItemReaderBuilder;
import org.springframework.batch.item.file.mapping.BeanWrapperFieldSetMapper;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.io.ClassPathResource;
import com.arnavsaraf.ipldashboard.model.Match;


@Configuration
@EnableBatchProcessing
public class BatchConfiguration {

  @Autowired
  public JobBuilderFactory jobBuilderFactory;
  
  private final String[] FIELD_NAMES = new String[] {
		  "id","city","date","player_of_match","venue","neutral_venue","team1",
		  "team2","toss_winner","toss_decision","winner","result","result_margin",
		  "eliminator","method","umpire1","umpire2"};

  @Autowired
  public StepBuilderFactory stepBuilderFactory;
  
  @Bean
  public FlatFileItemReader<MatchInput> reader() {
    return new FlatFileItemReaderBuilder<MatchInput>()
      .name("MatchItemReader")
      .resource(new ClassPathResource("match-data.csv"))
      .delimited()
      .names(FIELD_NAMES)
      .fieldSetMapper(new BeanWrapperFieldSetMapper<MatchInput>() {{
        setTargetType(MatchInput.class);
      }})
      .build();
  }

  @Bean
  public MatchDataProcessor processor() {
    return new MatchDataProcessor();
  }

  @Bean
  public JdbcBatchItemWriter<Match> writer(DataSource dataSource) {
    return new JdbcBatchItemWriterBuilder<Match>()
      .itemSqlParameterSourceProvider(new BeanPropertyItemSqlParameterSourceProvider<>())
      .sql("INSERT INTO match (id, city, date, player_of_match, venue, "
      		+ "team1, team2, toss_winner, tossDecision, matchWinner, "
      		+ "result, resultMargin, umpire1, umpire2) VALUES (:firstName, :lastName)")
      .dataSource(dataSource)
      .build();
  }

}